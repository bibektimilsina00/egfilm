// Egfilm Database Schema
// PostgreSQL database for persistent user data and preferences

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")  // 'user', 'admin', 'moderator'
  isActive  Boolean  @default(true)
  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // AI Configuration for Blog Generation
  geminiApiKey       String?  // User's Gemini API key
  openaiApiKey       String?  // User's OpenAI API key
  anthropicApiKey    String?  // User's Anthropic API key
  tmdbApiKey         String?  // User's TMDb API key for blog generation
  preferredAiModel   String?  @default("gemini-2.5-flash") // Default AI model (Gemini 2.5 Flash)
  
  // Relations
  watchlist        WatchlistItem[]
  continueWatching ContinueWatching[]
  watchRooms       WatchRoom[]
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  createdNotifications  SystemNotification[] @relation("CreatedNotifications")
  blogPosts        BlogPost[] @relation("BlogPosts")
  blogLikes        BlogLike[]
  blogComments     BlogComment[]
}

model WatchlistItem {
  id         String   @id @default(cuid())
  userId     String
  mediaId    Int
  mediaType  String   // 'movie' or 'tv'
  title      String
  posterPath String?
  addedAt    DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mediaId, mediaType])
  @@index([userId])
}

model ContinueWatching {
  id         String   @id @default(cuid())
  userId     String
  mediaId    Int
  mediaType  String   // 'movie' or 'tv'
  title      String
  posterPath String?
  progress   Int      // percentage 0-100
  season     Int?     // for TV shows
  episode     Int?     // for TV shows
  updatedAt  DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, mediaId, mediaType])
  @@index([userId])
}

model WatchRoom {
  id          String   @id @default(cuid())
  roomCode    String   @unique
  creatorId   String
  mediaId     Int
  mediaType   String   // 'movie' or 'tv'
  mediaTitle  String
  embedUrl    String?  // URL for embedded video player
  posterPath  String?
  season      Int?     // for TV shows
  episode     Int?     // for TV shows
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  lastActiveAt DateTime @default(now())
  
  // Relations
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  participants RoomParticipant[]
  
  @@index([roomCode])
  @@index([creatorId])
  @@index([isActive])
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'watch_invite', 'room_join', 'system'
  title       String
  message     String
  fromUserId  String
  toUserId    String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Watch Together specific fields
  roomCode    String?
  mediaId     Int?
  mediaType   String?  // 'movie' or 'tv'
  mediaTitle  String?
  embedUrl    String?
  
  // Relations
  fromUser User @relation("SentNotifications", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedNotifications", fields: [toUserId], references: [id], onDelete: Cascade)
  
  @@index([toUserId, isRead])
  @@index([toUserId, createdAt])
}

model RoomParticipant {
  id        String   @id @default(cuid())
  roomId    String
  userId    String?  // null for guests
  username  String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  
  // Relations
  room WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([roomId])
  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  roomId    String
  userId    String?  // null for system messages
  username  String
  message   String
  createdAt DateTime @default(now())
  
  // Relations
  room WatchRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([roomId])
  @@index([createdAt])
}

model SystemNotification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // 'info', 'warning', 'error', 'maintenance'
  creatorId String
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  creator User @relation("CreatedNotifications", fields: [creatorId], references: [id], onDelete: Cascade)
  
  @@index([isActive])
  @@index([createdAt])
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String   @db.Text
  content     String   @db.Text  // Rich text content (HTML)
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?  @db.Text
  keywords        String[] // Array of keywords
  ogImage         String?  // OpenGraph image URL
  
  // Media References
  mediaId         Int?
  mediaType       String?  // 'movie' or 'tv'
  mediaTitle      String?
  mediaPosterPath String?
  mediaBackdropPath String?
  mediaReleaseDate String?
  mediaGenres     String[] // Array of genre names
  mediaRating     Float?
  mediaOverview   String?  @db.Text
  mediaCast       Json?    // Array of cast objects with name, character, profile_path
  
  // Blog Metadata
  authorId        String
  category        String   @default("review") // 'review', 'news', 'guide', 'analysis'
  tags            String[] // Array of tags
  featuredImage   String?
  readingTime     Int      @default(5) // Minutes
  viewCount       Int      @default(0)
  
  // Status
  status          String   @default("draft") // 'draft', 'published', 'archived'
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  author User @relation("BlogPosts", fields: [authorId], references: [id], onDelete: Cascade)
  likes  BlogLike[]
  comments BlogComment[]
  
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([category])
  @@index([mediaId, mediaType])
}

model BlogLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  // Relations
  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId]) // User can only like a post once
  @@index([postId])
  @@index([userId])
}

model BlogComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String   @db.Text
  parentId  String?  // For nested replies
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  post    BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies BlogComment[] @relation("CommentReplies")
  
  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// Track blog generation progress to avoid duplicates
model BlogGenerationProgress {
  id            String   @id @default(cuid())
  userId        String
  mediaType     String   // 'movie' or 'tv'
  sortBy        String   // 'popular', 'top_rated', etc.
  currentPage   Int      @default(1)
  currentIndex  Int      @default(0) // Index within the current page
  totalGenerated Int     @default(0)
  lastMediaId   Int?     // Last TMDb media ID that was processed
  lastUpdated   DateTime @updatedAt
  createdAt     DateTime @default(now())
  
  @@unique([userId, mediaType, sortBy]) // One progress tracker per user/type/sort combination
  @@index([userId])
  @@index([mediaType, sortBy])
}
