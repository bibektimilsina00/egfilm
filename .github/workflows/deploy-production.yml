name: 🚀 Deploy Production

on:
  push:
    branches: [main]
    tags:
      - "v*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4

      - name: 🏷 Set Version
        id: vars
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image=ghcr.io/${GITHUB_REPOSITORY,,}:$VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Create .env.local for build
        run: |
            cat > .env.local <<'ENVEOF'
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_HOST=egfilm-redis
            REDIS_PORT=6379
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || '' }}
            NEXT_PUBLIC_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
            NEXT_PUBLIC_TMDB_BASE_URL=${{ vars.TMDB_BASE_URL || 'https://api.themoviedb.org/3' }}
            AUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            AUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_APP_NAME=${{ vars.APP_NAME || 'Egfilm' }}
            NEXT_PUBLIC_APP_URL=${{ vars.APP_URL || secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_TURN_SERVER=${{ vars.TURN_SERVER || '' }}
            NEXT_PUBLIC_TURN_USERNAME=${{ vars.TURN_USERNAME || '' }}
            NEXT_PUBLIC_TURN_PASSWORD=${{ secrets.TURN_PASSWORD || '' }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN || '' }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN || '' }}
            NEXT_PUBLIC_UMAMI_WEBSITE_ID=${{ vars.UMAMI_WEBSITE_ID || '' }}
            NEXT_PUBLIC_UMAMI_SCRIPT_URL=${{ vars.UMAMI_SCRIPT_URL || '' }}
            ENVEOF
      
      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: 🐳 Build & Push Image
        run: |
          ls -la ./
          cat .env.local
          docker build -t ${{ steps.vars.outputs.image }} .
          docker push ${{ steps.vars.outputs.image }}

      - name: 📤 Copy docker-compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/egfilm"

      - name: 🚀 Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ~/egfilm
            echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Create .env file with all required variables
            cat > .env <<'ENVEOF'
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_HOST=egfilm-redis
            REDIS_PORT=6379
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || '' }}
            NEXT_PUBLIC_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
            NEXT_PUBLIC_TMDB_BASE_URL=${{ vars.TMDB_BASE_URL || 'https://api.themoviedb.org/3' }}
            AUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            AUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_APP_NAME=${{ vars.APP_NAME || 'Egfilm' }}
            NEXT_PUBLIC_APP_URL=${{ vars.APP_URL || secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_TURN_SERVER=${{ vars.TURN_SERVER || '' }}
            NEXT_PUBLIC_TURN_USERNAME=${{ vars.TURN_USERNAME || '' }}
            NEXT_PUBLIC_TURN_PASSWORD=${{ secrets.TURN_PASSWORD || '' }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN || '' }}
            NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN || '' }}
            NEXT_PUBLIC_UMAMI_WEBSITE_ID=${{ vars.UMAMI_WEBSITE_ID || '' }}
            NEXT_PUBLIC_UMAMI_SCRIPT_URL=${{ vars.UMAMI_SCRIPT_URL || '' }}
            ENVEOF

            # Deploy using docker compose
            IMAGE_NAME=${{ steps.vars.outputs.image }} docker compose pull
            IMAGE_NAME=${{ steps.vars.outputs.image }} docker compose up -d --remove-orphans

            # Wait for health check
            echo "🏥 Waiting for application to be healthy..."
            for i in {1..60}; do
              if curl -sf http://localhost:8000 > /dev/null 2>&1; then
                echo "✅ Application is healthy"
                break
              fi
              echo -n "."
              sleep 2
              if [ $i -eq 60 ]; then
                echo "❌ Health check failed"
                docker compose logs app
                exit 1
              fi
            done

            docker compose ps

      - name: ✅ Deployment Summary
        run: |
          echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "📦 Version: ${{ steps.vars.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "🐳 Image: ${{ steps.vars.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Host: ${{ vars.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
