# ========================================
# 🚀 EGFilm Main App - Production Deployment
# ========================================
# World-class CI/CD pipeline with zero-downtime deployment
# Following enterprise-grade best practices

name: 🚀 EGFilm Main App - Production Deploy

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip some checks)'
        type: boolean
        default: false
      rollback_version:
        description: 'Rollback to version (e.g., v1.2.3)'
        type: string
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bibektimilsina00/egfilm
  NODE_VERSION: "18"
  HEALTH_CHECK_TIMEOUT: 120
  DEPLOYMENT_TIMEOUT: 600

# Cancel in-progress deployments for the same branch
concurrency:
  group: deploy-main-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  packages: write
  id-token: write
  actions: read

jobs:
  # ===========================================
  # 🔍 PRE-DEPLOYMENT VALIDATION
  # ===========================================
  validate:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.version.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
      is-rollback: ${{ github.event.inputs.rollback_version != '' }}
    
    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            app:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
              - 'next.config.*'
              - 'tailwind.config.*'
              - 'Dockerfile'
              - 'docker-compose.*'
              - 'prisma/**'
              - '.github/workflows/**'

      - name: 🏷️ Determine Version
        id: version
        run: |
          if [[ "${{ github.event.inputs.rollback_version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.rollback_version }}" >> $GITHUB_OUTPUT
            echo "🔄 Rollback deployment to version: ${{ github.event.inputs.rollback_version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "🏷️ Tag deployment: ${VERSION}"
          else
            VERSION="main-${GITHUB_SHA::8}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "🌟 Branch deployment: ${VERSION}"
          fi
          
          # Set should-deploy flag
          if [[ "${{ steps.changes.outputs.app }}" == "true" ]] || \
             [[ "${{ github.event.inputs.force_deploy }}" == "true" ]] || \
             [[ "${GITHUB_REF}" == refs/tags/* ]] || \
             [[ "${{ github.event.inputs.rollback_version }}" != "" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No deployment needed - no relevant changes detected"
          fi

  # ===========================================
  # 🧪 COMPREHENSIVE TESTING
  # ===========================================
  test:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    needs: [validate]
    if: needs.validate.outputs.should-deploy == 'true' && needs.validate.outputs.is-rollback != 'true'
    
    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Lint Code
        run: npm run lint

      - name: 🏗️ Build Check
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🧪 Run Tests
        run: npm test
        env:
          CI: true

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

      - name: 🔒 Security Audit
        run: npm audit --audit-level high

      - name: 🔍 Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===========================================
  # 🐳 DOCKER BUILD & PUSH
  # ===========================================
  build:
    name: 🐳 Build & Push Container
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: needs.validate.outputs.should-deploy == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-uri: ${{ steps.image-uri.outputs.image-uri }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4
        if: needs.validate.outputs.is-rollback != 'true'

      - name: 🏷️ Generate Metadata
        id: meta
        if: needs.validate.outputs.is-rollback != 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=EGFilm Main App
            org.opencontainers.image.description=Movie & TV streaming platform
            org.opencontainers.image.vendor=EGFilm
            org.opencontainers.image.version=${{ needs.validate.outputs.version }}
            org.opencontainers.image.created={{date 'RFC3339'}}
            org.opencontainers.image.revision=${{ github.sha }}
            maintainer=bibektimilsina00

      - name: 🔧 Setup Docker Buildx
        if: needs.validate.outputs.is-rollback != 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build & Push Image
        id: build
        if: needs.validate.outputs.is-rollback != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ needs.validate.outputs.version }}
            COMMIT_SHA=${{ github.sha }}

      - name: 🔒 Sign Image with Cosign
        if: needs.validate.outputs.is-rollback != 'true'
        uses: sigstore/cosign-installer@v3

      - name: ✍️ Sign Container
        if: needs.validate.outputs.is-rollback != 'true'
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: 📝 Set Image URI for Deployment
        id: image-uri
        run: |
          if [[ "${{ needs.validate.outputs.is-rollback }}" == "true" ]]; then
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"
          else
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          fi
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "🐳 Deployment image: ${IMAGE_URI}"

  # ===========================================
  # 🚀 ZERO-DOWNTIME DEPLOYMENT
  # ===========================================
  deploy:
    name: 🚀 Zero-Downtime Deploy
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment:
      name: production
      url: ${{ vars.APP_URL || 'https://egfilm.xyz' }}
    timeout-minutes: 10
    
    steps:
      - name: 🧾 Checkout Deployment Config
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            scripts/
          sparse-checkout-cone-mode: false

      - name: 🔐 Setup SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts
          ssh-keyscan -H ${{ vars.SERVER_HOST || 'your-server.com' }} >> ~/.ssh/known_hosts

      - name: 🏥 Pre-deployment Health Check
        run: |
          echo "🏥 Checking current application health..."
          if curl -sf "${{ vars.APP_URL || 'https://egfilm.xyz' }}/api/health" > /dev/null; then
            echo "✅ Application is currently healthy"
          else
            echo "⚠️ Application appears to be down - proceeding with deployment"
          fi

      - name: 📋 Prepare Production Environment
        run: |
          cat > production.env <<EOF
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
          
          # Database
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # TMDB API
          TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          NEXT_PUBLIC_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          NEXT_PUBLIC_TMDB_BASE_URL=https://api.themoviedb.org/3
          
          # Authentication
          AUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          AUTH_URL=${{ vars.APP_URL || 'https://egfilm.xyz' }}
          NEXTAUTH_URL=${{ vars.APP_URL || 'https://egfilm.xyz' }}
          
          # Application
          NEXT_PUBLIC_APP_NAME=EGFilm
          NEXT_PUBLIC_APP_URL=${{ vars.APP_URL || 'https://egfilm.xyz' }}
          NEXT_PUBLIC_BLOG_SITE_URL=${{ vars.BLOG_SITE_URL || 'https://blog.egfilm.xyz' }}
          
          # WebRTC (Optional)
          NEXT_PUBLIC_TURN_SERVER=${{ vars.TURN_SERVER || '' }}
          NEXT_PUBLIC_TURN_USERNAME=${{ vars.TURN_USERNAME || '' }}
          NEXT_PUBLIC_TURN_PASSWORD=${{ secrets.TURN_PASSWORD || '' }}
          
          # Build Info
          NEXT_PUBLIC_BUILD_VERSION=${{ needs.validate.outputs.version }}
          NEXT_PUBLIC_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          NEXT_PUBLIC_GIT_SHA=${{ github.sha }}
          
          # Google Analytics
          NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ vars.GA_MEASUREMENT_ID }}
          
          # Docker Image
          IMAGE_NAME=${{ needs.build.outputs.image-uri }}
          EOF

      - name: 🚀 Deploy with Zero Downtime
        run: |
          # Copy files to server
          scp -i ~/.ssh/deploy_key production.env ${{ vars.SERVER_USER || 'deploy' }}@${{ vars.SERVER_HOST || 'your-server.com' }}:~/egfilm/.env
          scp -i ~/.ssh/deploy_key docker-compose.yml ${{ vars.SERVER_USER || 'deploy' }}@${{ vars.SERVER_HOST || 'your-server.com' }}:~/egfilm/
          
          # Execute zero-downtime deployment
          ssh -i ~/.ssh/deploy_key ${{ vars.SERVER_USER || 'deploy' }}@${{ vars.SERVER_HOST || 'your-server.com' }} << 'DEPLOY_SCRIPT'
            set -e
            cd ~/egfilm
            
            echo "🔐 Logging into container registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            echo "📥 Pulling new image..."
            docker compose pull app
            
            echo "🔄 Starting rolling update..."
            # Create new container with different name
            docker compose up -d --no-deps --scale app=2 app
            
            echo "⏳ Waiting for new container to be ready..."
            timeout 120 bash -c 'until curl -sf http://localhost:3000/api/health > /dev/null; do sleep 2; echo -n .; done'
            
            echo "🔄 Removing old container..."
            docker compose up -d --no-deps --scale app=1 --remove-orphans app
            
            echo "🧹 Cleaning up old images..."
            docker image prune -af --filter "until=24h"
            
            echo "✅ Deployment completed successfully!"
          DEPLOY_SCRIPT

      - name: 🏥 Post-deployment Health Check
        run: |
          echo "🏥 Verifying deployment health..."
          
          # Wait for application to be fully ready
          for i in {1..30}; do
            if curl -sf "${{ vars.APP_URL || 'https://egfilm.xyz' }}/api/health" > /dev/null; then
              echo "✅ Application is healthy after deployment"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Health check failed after 60 seconds"
              
              # Get deployment logs for debugging
              ssh -i ~/.ssh/deploy_key ${{ vars.SERVER_USER || 'deploy' }}@${{ vars.SERVER_HOST || 'your-server.com' }} \
                "cd ~/egfilm && docker compose logs app --tail=100"
              exit 1
            fi
            
            echo -n "."
            sleep 2
          done

      - name: 🧪 Smoke Tests
        run: |
          echo "🧪 Running post-deployment smoke tests..."
          
          # Test critical endpoints
          BASE_URL="${{ vars.APP_URL || 'https://egfilm.xyz' }}"
          
          # Test home page
          if curl -sf "${BASE_URL}/" > /dev/null; then
            echo "✅ Home page accessible"
          else
            echo "❌ Home page failed"
            exit 1
          fi
          
          # Test API health
          if curl -sf "${BASE_URL}/api/health" | grep -q "ok"; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi
          
          # Test movies page
          if curl -sf "${BASE_URL}/movies" > /dev/null; then
            echo "✅ Movies page accessible"
          else
            echo "⚠️ Movies page check failed (non-critical)"
          fi

  # ===========================================
  # 📊 DEPLOYMENT REPORTING
  # ===========================================
  report:
    name: 📊 Deployment Report
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    if: always()
    
    steps:
      - name: 📊 Generate Deployment Summary
        run: |
          echo "# 🚀 EGFilm Main App Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: 🟢 Live and healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: 🔴 Deployment unsuccessful" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate.outputs.is-rollback }}" == "true" ]]; then
            echo "- **Type**: 🔄 Rollback deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🎬 Main App](${{ vars.APP_URL || 'https://egfilm.xyz' }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📝 Blog](${{ vars.BLOG_SITE_URL || 'https://blog.egfilm.xyz' }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🏥 Health Check](${{ vars.APP_URL || 'https://egfilm.xyz' }}/api/health)" >> $GITHUB_STEP_SUMMARY

      - name: 📧 Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 EGFilm Main App deployed successfully!"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "🌐 Live at: ${{ vars.APP_URL || 'https://egfilm.xyz' }}"

      - name: 🚨 Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ EGFilm Main App deployment failed!"
          echo "Check the logs above for details."
          echo "Consider rolling back if needed."
          exit 1

# ===========================================
# 📝 WORKFLOW NOTES
# ===========================================
# This workflow implements:
# ✅ Zero-downtime rolling deployments
# ✅ Comprehensive testing pipeline
# ✅ Security scanning & image signing
# ✅ Health checks & smoke tests
# ✅ Rollback capability
# ✅ Deployment monitoring
# ✅ Enterprise-grade error handling
