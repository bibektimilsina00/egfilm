# ========================================
# 🚀 EGFilm Main App – Production Deploy
#   (appleboy edition – no manual SSH)
# ========================================
name: 🚀 EGFilm Main App – Production Deploy

on:
  push:
    branches: [main, deploy]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment (skip some checks)"
        type: boolean
        default: false
      rollback_version:
        description: "Rollback to version (e.g., v1.2.3)"
        type: string
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "18"
  HEALTH_CHECK_TIMEOUT: 120
  DEPLOYMENT_TIMEOUT: 600

concurrency:
  group: deploy-main-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  packages: write
  id-token: write
  actions: read

jobs:
  validate:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.version.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
      is-rollback: ${{ github.event.inputs.rollback_version != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            app:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
              - 'next.config.*'
              - 'tailwind.config.*'
              - 'Dockerfile'
              - 'docker-compose.*'
              - 'prisma/**'
              - '.github/workflows/**'

      - id: version
        run: |
          if [[ -n "${{ github.event.inputs.rollback_version }}" ]]; then
            echo "version=${{ github.event.inputs.rollback_version }}" >> $GITHUB_OUTPUT
            echo "🔄 Rollback to ${{ github.event.inputs.rollback_version }}"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "🏷️ Tag deployment $VERSION"
          else
            VERSION="main-${GITHUB_SHA::8}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "🌟 Branch deployment $VERSION"
          fi

          if [[ "${{ steps.changes.outputs.app }}" == "true" ]] || \
             [[ "${{ github.event.inputs.force_deploy }}" == "true" ]] || \
             [[ "$GITHUB_REF" == refs/tags/* ]] || \
             [[ -n "${{ github.event.inputs.rollback_version }}" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No relevant changes – skipping deployment"
          fi

  test:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true' && needs.validate.outputs.is-rollback != 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --prefer-offline --no-audit
      - run: npm run lint
      - run: npm run build
        env:
          NODE_ENV: production
      - run: npm test
        env:
          CI: true
      - uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
      - run: npm audit --audit-level high
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  build:
    name: 🐳 Build & Push Container
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: needs.validate.outputs.should-deploy == 'true'
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-uri: ${{ steps.image-uri.outputs.image-uri }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        if: needs.validate.outputs.is-rollback != 'true'

      - uses: docker/metadata-action@v5
        id: meta
        if: needs.validate.outputs.is-rollback != 'true'
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=EGFilm Main App
            org.opencontainers.image.description=Movie & TV streaming platform
            org.opencontainers.image.vendor=EGFilm
            org.opencontainers.image.version=${{ needs.validate.outputs.version }}
            org.opencontainers.image.created={{date 'RFC3339'}}
            org.opencontainers.image.revision=${{ github.sha }}
            maintainer=bibektimilsina00

      - uses: docker/setup-buildx-action@v3
        if: needs.validate.outputs.is-rollback != 'true'

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - uses: docker/build-push-action@v5
        id: build
        if: needs.validate.outputs.is-rollback != 'true'
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ needs.validate.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            NEXT_PUBLIC_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
            NEXT_PUBLIC_TMDB_BASE_URL=https://api.themoviedb.org/3
            NEXT_PUBLIC_APP_NAME=EGFilm
            NEXT_PUBLIC_APP_URL=${{ vars.APP_URL || 'https://egfilm.xyz' }}
            NEXT_PUBLIC_BLOG_SITE_URL=${{ vars.BLOG_SITE_URL || 'https://blog.egfilm.xyz' }}
            NEXT_PUBLIC_TURN_SERVER=${{ vars.TURN_SERVER || '' }}
            NEXT_PUBLIC_TURN_USERNAME=${{ vars.TURN_USERNAME || '' }}
            NEXT_PUBLIC_BUILD_VERSION=${{ needs.validate.outputs.version }}
            NEXT_PUBLIC_GIT_SHA=${{ github.sha }}

      - uses: sigstore/cosign-installer@v3
        if: needs.validate.outputs.is-rollback != 'true'

      - if: needs.validate.outputs.is-rollback != 'true'
        run: cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - id: image-uri
        run: |
          if [[ "${{ needs.validate.outputs.is-rollback }}" == "true" ]]; then
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"
          else
            IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          fi
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 Zero-Downtime Deploy
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment:
      name: production
      url: ${{ vars.APP_URL || 'https://egfilm.xyz' }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/deploy.sh
            docker-compose.yml
          sparse-checkout-cone-mode: false

      # 1.  Create production.env on the runner
      - name: 📝 Create .env
        run: |
          cat > .env <<EOF
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
          AUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          AUTH_TRUST_HOST=true
          AUTH_URL=${{ vars.APP_URL }}
          NEXTAUTH_URL=${{ vars.APP_URL }}
          NEXT_PUBLIC_APP_NAME=EGFilm
          NEXT_PUBLIC_APP_URL=${{ vars.APP_URL }}
          NEXT_PUBLIC_BLOG_SITE_URL=${{ vars.BLOG_SITE_URL || 'https://blog.egfilm.xyz' }}
          NEXT_PUBLIC_TURN_SERVER=${{ vars.TURN_SERVER || '' }}
          NEXT_PUBLIC_TURN_USERNAME=${{ vars.TURN_USERNAME || '' }}
          TURN_PASSWORD=${{ secrets.TURN_PASSWORD || '' }}
          NEXT_PUBLIC_BUILD_VERSION=${{ needs.validate.outputs.version }}
          NEXT_PUBLIC_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          NEXT_PUBLIC_GIT_SHA=${{ github.sha }}
          REGISTRY_TOKEN=${{ secrets.REGISTRY_TOKEN }}
          DEPLOY_USER=${{ github.actor }}
          IMAGE_NAME=${{ needs.build.outputs.image-uri }}
          EOF

      #  Ship files to server (appleboy/scp-action)
      - name: 📤 Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || 22 }}
          source: ".env,scripts/deploy.sh,docker-compose.yml"
          target: "~/egfilm/"
          overwrite: true

      # 3.  Run deployment script (appleboy/ssh-action)
      - name: 🚀 Execute deploy.sh
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || 22 }}
          script: |
            cd ~/egfilm
            bash deploy.sh


      # 4.  Health-check & smoke tests (still via appleboy/ssh-action)
      - name: 🏥 Post-deploy health check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || '22' }}
          script: |
            set -e
            for i in {1..30}; do
              curl -sf http://localhost:8000/api/health && echo && echo "✅ App healthy" && exit 0
              echo -n .
              sleep 2
            done
            echo "❌ Health check failed"
            docker compose -f ~/egfilm/docker-compose.yml logs app --tail=50
            exit 1

      - name: 🧪 Smoke tests
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || '22' }}
          script: |
            BASE="${{ vars.APP_URL }}"
            curl -sf "$BASE/"               && echo "✅ Home page"
            curl -sf "$BASE/api/health"     && echo "✅ API health"
            curl -sf "$BASE/movies"         && echo "✅ Movies page" || echo "⚠️ Movies page unavailable (non-critical)"

      # 5.  Final cleanup
      - name: 🧹 System cleanup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || '22' }}
          script: |
            docker system prune -af --filter "until=1h"
            docker system df

  report:
    name: 📊 Deployment Report
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    environment: production
    if: always()
    steps:
      - name: 📋 GitHub step summary
        run: |
          echo "# 🚀 EGFilm Main App Deployment Report" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate.outputs.is-rollback }}" == "true" ]]; then
            echo "- **Type**: 🔄 Rollback" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🎬 Main App](${{ vars.APP_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📝 Blog](${{ vars.BLOG_SITE_URL || 'https://blog.egfilm.xyz' }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🏥 Health Check](${{ vars.APP_URL }}/api/health)" >> $GITHUB_STEP_SUMMARY

      - if: needs.deploy.result == 'success'
        run: |
          echo "🎉 EGFilm deployed successfully!"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "🌐 Live at: ${{ vars.APP_URL }}"

      - if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed – inspect logs above"
          exit 1