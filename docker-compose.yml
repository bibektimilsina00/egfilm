# Docker Compose for Egfilm Production with PostgreSQL

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
  container_name: egfilm-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-movieuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-moviepass}
      - POSTGRES_DB=${POSTGRES_DB:-moviedb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-movieuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Egfilm Application
  egfilm:
    build:
      context: .
      dockerfile: Dockerfile
  container_name: egfilm-app
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-movieuser}:${POSTGRES_PASSWORD:-moviepass}@database:5432/${POSTGRES_DB:-moviedb}
      - NEXT_PUBLIC_TMDB_API_KEY=${NEXT_PUBLIC_TMDB_API_KEY}
      - NEXT_PUBLIC_TMDB_BASE_URL=${NEXT_PUBLIC_TMDB_BASE_URL:-https://api.themoviedb.org/3}
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_URL=${AUTH_URL:-http://localhost:8000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
