# Docker Compose for Egfilm Production Deployment
# Optimized for performance, security, and minimal resource usage
# Includes PostgreSQL database and Redis for caching

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: egfilm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-egfilm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-anihortes}
      POSTGRES_DB: ${POSTGRES_DB:-egfilm-database}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-egfilm_admin} -d ${POSTGRES_DB:-egfilm-database}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
    # Resource limits for production (1 CPU server)
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
        reservations:
          cpus: '0.15'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Redis for BullMQ job queue and caching
  redis:
    image: redis:7-alpine
    container_name: egfilm-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --appendonly yes
      --maxmemory ${REDIS_MAXMEM:-512mb}
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network
    # Resource limits for production (1 CPU server)
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Egfilm Application (Production)
  app:
    image: ${IMAGE_NAME:-ghcr.io/bibektimilsina00/egfilm:deploy}
    container_name: egfilm-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TMDB_API_KEY: ${NEXT_PUBLIC_TMDB_API_KEY}
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network
    labels:
      - "com.egfilm.service=app"
      - "com.egfilm.environment=production"
    # Resource limits for production (1 CPU server)
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # Use init process for proper signal handling
    init: true

  # BullMQ Worker for Background Jobs (Blog generation, etc.)
  worker:
    image: ${IMAGE_NAME:-ghcr.io/bibektimilsina00/egfilm:deploy}-worker
    container_name: egfilm-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TMDB_API_KEY: ${NEXT_PUBLIC_TMDB_API_KEY}
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    command: ["npm", "run", "worker"]
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "com.egfilm.service=worker"
      - "com.egfilm.environment=production"
    # Resource limits for worker (1 CPU server)
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"
    # Init process for proper signal handling
    init: true

volumes:
  postgres_data:
    name: egfilm_postgres_data
    driver: local
  redis_data:
    name: egfilm_redis_data
    driver: local

networks:
  app-network:
    name: app-network
    driver: bridge
    driver_opts:
      com.docker.network.bridge.default_bridge: "false"

